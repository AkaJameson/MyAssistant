@page "/"
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using MyAssistant.Components.Layout
@implements IAsyncDisposable

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- 左侧会话面板 -->
        <div class="col-3 border-end">
            <SessionPanel />
        </div>

        <!-- 中间内容区域 -->
        <div class="col-9 d-flex flex-column h-100">
            <!-- Markdown渲染区域 -->
            <div class="flex-grow-1 overflow-auto p-3 markdown-body" 
                 @ref="outputContainer"
                 style="background-color: #f6f8fa;">
                 @((MarkupString)renderedHtml)
            </div>

            <!-- 底部输入区域 -->
            <div class="border-top p-3">
                <InputPanel OnSend="HandleUserInput" />
            </div>
        </div>
    </div>
</div>

@code {
    private string markdownContent = "";
    private string renderedHtml = "";
    private ElementReference outputContainer;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // 初始化SignalR连接
        hubConnection = new HubConnectionBuilder()
            .WithUrl("/chatHub")
            .Build();

        // 注册接收消息的处理方法
        hubConnection.On<string>("ReceiveStreamingMessage", async (message) =>
        {
            markdownContent += message;
            await RenderMarkdown();
            await ScrollToBottom();
        });

        await hubConnection.StartAsync();
    }

    private async Task HandleUserInput(string userInput)
    {
        // 清空前一次对话内容
        markdownContent = "";
        renderedHtml = "";
        StateHasChanged();
        
        // 通过SignalR发送用户输入
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendUserMessage", userInput);
        }
    }

    private async Task RenderMarkdown()
    {
        // 调用JS互操作渲染Markdown
        renderedHtml = await JSRuntime.InvokeAsync<string>(
            "window.markdownInterop.renderMarkdown", 
            markdownContent);
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        // 滚动到底部
        await JSRuntime.InvokeVoidAsync(
            "scrollToBottom", 
            outputContainer);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
