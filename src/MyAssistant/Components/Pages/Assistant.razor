@page "/"
@using MyAssistant.Components.Shared
@using MyAssistant.Data
@using MyAssistant.IServices
@using System.Text
@inject IChatService ChatService
@inject IAgentService AgentService
@inject IKnowledgeService KnowledgeService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- 左侧历史会话面板 -->
        <div class="col-md-3 bg-light p-3 h-100 d-flex flex-column">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4>历史会话</h4>
                <button class="btn btn-sm btn-primary" @onclick="CreateNewSession">
                    <i class="bi bi-plus-lg"></i> 新建会话
                </button>
            </div>

            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="搜索会话..." @bind="searchTerm" />
                <button class="btn btn-outline-secondary" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>

            <div class="flex-grow-1 overflow-auto">
                <ul class="list-group">
                    @if (sessionsLoading)
                    {
                        <li class="list-group-item">
                            <div class="d-flex justify-content-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">加载中...</span>
                                </div>
                            </div>
                        </li>
                    }
                    else
                    {
                        @foreach (var session in filteredSessions)
                        {
                            <li class="list-group-item list-group-item-action @(session.SessionId == activeSessionId ? "active" : "")"
                            @onclick="() => SetActiveSession(session.SessionId)">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@session.SessionId</h6>
                                    <small>@session.LastUpdatedAt.ToLocalTime().ToString("g")</small>
                                </div>
                                <p class="mb-1 text-truncate">@GetSessionPreview(session)</p>
                            </li>
                        }
                    }
                </ul>
            </div>

            <div class="mt-auto pt-3 border-top">
                <button class="btn btn-outline-danger w-100" @onclick="ConfirmDeleteSession">
                    <i class="bi bi-trash"></i> 删除当前会话
                </button>
            </div>
        </div>

        <!-- 右侧聊天区域 -->
        <div class="col-md-9 d-flex flex-column h-100">
            <div class="d-flex justify-content-between align-items-center border-bottom p-3">
                <h4>@(activeSession?.SessionId ?? "新会话")</h4>
                <div>
                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="OpenProjectModal">
                        <i class="bi bi-folder-plus"></i> 创建项目
                    </button>

                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => showModelConfig = true">
                        <i class="bi bi-gear"></i> 模型设置
                    </button>
                    <button class="btn btn-sm btn-outline-success" @onclick="ExportConversation">
                        <i class="bi bi-download"></i> 导出对话
                    </button>
                    <button class="btn btn-sm btn-outline-info ms-2" @onclick="() => showKnowledgeBase = true">
                        <i class="bi bi-book"></i> 知识库
                    </button>
                </div>
            </div>


            <!-- 知识集选择区域 -->
            <div class="p-3 bg-light mb-3">
                <div class="row">
                    <div class="col-md-8">
                        <select class="form-select" @bind="selectedKnowledgeSetId">
                            <option value="">-- 选择知识集 --</option>
                            @if (knowledgeSets != null)
                            {
                                @foreach (var set in knowledgeSets)
                                {
                                    <option value="@set.Id">@set.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-primary w-100" @onclick="LoadKnowledgeSet"
                        disabled="@(string.IsNullOrEmpty(selectedKnowledgeSetId))">
                            加载知识集
                        </button>
                    </div>
                </div>
            </div>

            <!-- 消息区域 -->
            <div class="flex-grow-1 overflow-auto p-3" id="chat-messages">
                @if (activeSession != null)
                {
                    @foreach (var message in activeSession.Messages)
                    {
                        <!-- 用户消息 -->
                        @if (!string.IsNullOrWhiteSpace(message.UserInput))
                        {
                            <div class="mb-3">
                                <div class="card">
                                    <div class="card-header bg-primary text-white d-flex justify-content-between">
                                        <span>您</span>
                                        <small>@message.Timestamp.ToLocalTime().ToString("g")</small>
                                    </div>
                                    <div class="card-body">
                                        <p class="card-text">@message.UserInput</p>
                                        @if (message.Files?.Any() == true)
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted">附件：</small>
                                                <div class="d-flex flex-wrap gap-1">
                                                    @foreach (var file in message.Files)
                                                    {
                                                        <span class="badge bg-secondary">
                                                            @file.Name
                                                        </span>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- AI消息 -->
                        @if (!string.IsNullOrWhiteSpace(message.AssistantResponse))
                        {
                            <div class="mb-3">
                                <div class="card">
                                    <div class="card-header bg-success text-white d-flex justify-content-between">
                                        <span>AI助手</span>
                                        <div>
                                            <small>@message.Timestamp.ToLocalTime().ToString("g")</small>
                                            <button class="btn btn-sm btn-outline-light ms-2"
                                            @onclick="() => ExportMessage(message.AssistantResponse)">
                                                <i class="bi bi-download"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-light ms-1"
                                            @onclick="() => CopyToClipboard(message.AssistantResponse)">
                                                <i class="bi bi-clipboard"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <!-- 使用 Markdown 渲染组件 -->
                                        <MarkdownRenderer MarkdownContent="@message.AssistantResponse" />
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>

            <!-- 输入区域 -->
            <div class="border-top p-3">
                <div class="d-flex">
                    <div class="flex-grow-1 me-2 position-relative">
                        <textarea @ref="chatInputRef" class="form-control" rows="3" placeholder="输入您的问题..."
                        @bind="newMessage" @onkeydown="HandleKeyDown" disabled="@isSending"></textarea>
                        <div class="position-absolute top-0 end-0 mt-2 me-2">
                            <label class="btn btn-sm btn-outline-secondary mb-0" title="上传文件">
                                <i class="bi bi-paperclip"></i>
                                <InputFile type="file" class="d-none" OnChange="HandleFileUpload" multiple />
                            </label>
                        </div>
                    </div>
                    <button class="btn btn-primary align-self-end" @onclick="SendMessage" disabled="@isSending">
                        @if (isSending)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-send"></i>
                        }
                        发送
                    </button>
                </div>

                @if (attachedFiles.Any())
                {
                    <div class="mt-2">
                        <small class="text-muted">已上传文件：</small>
                        <div class="d-flex flex-wrap gap-1">
                            @foreach (var file in attachedFiles)
                            {
                                <span class="badge bg-secondary">
                                    @file.Name
                                    <i class="bi bi-x" @onclick="() => RemoveFile(file)"></i>
                                </span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>


    </div>
    <div class="modal-overlay" style="@(showKnowledgeBase || showModelConfig ||showProjectModal ? "display:block;" : "display:none;")">
        @if (showKnowledgeBase)
        {
            <div class="modal-content-wrapper">
                <div class="modal-header d-flex justify-content-between align-items-center bg-light p-3">
                    <h3 class="mb-0">知识库管理</h3>
                    <button class="btn btn-close" @onclick="() => showKnowledgeBase = false"></button>
                </div>
                <KnowledgeBase OnClose="() => showKnowledgeBase = false" />
            </div>
        }

        @if (showModelConfig)
        {
            <div class="modal-content-wrapper">
                <div class="modal-header d-flex justify-content-between align-items-center bg-primary text-white p-3">
                    <h3 class="mb-0">模型配置</h3>
                    <button class="btn btn-close btn-close-white" @onclick="() => showModelConfig = false"></button>
                </div>
                <ModelConfig OnClose="() => showModelConfig = false" />
            </div>
        }
 
        @if (showProjectModal)
        {
            <div class="modal-overlay" style="display:block;">
                <div class="modal-content-wrapper">
                    <div class="modal-header bg-info text-white p-3">
                        <h3 class="mb-0">创建新项目</h3>
                        <button class="btn btn-close btn-close-white" @onclick="CloseProjectModal"></button>
                    </div>
                    <div class="modal-body p-3">
                        <div class="mb-3">
                            <label class="form-label">项目名称 *</label>
                            <input type="text" class="form-control" @bind="projectName"
                            disabled="@isCreatingProject" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">项目描述 *</label>
                            <textarea class="form-control" rows="4" @bind="projectDescription"
                            disabled="@isCreatingProject"></textarea>
                            <small class="text-muted">详细描述项目功能和需求</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">技术栈</label>
                            <select class="form-select" @bind="techStack" disabled="@isCreatingProject">
                                <option value="">-- 选择技术栈 --</option>
                                <option value="C#/.NET">C#/.NET</option>
                                <option value="JavaScript/Node.js">JavaScript/Node.js</option>
                                <option value="Python">Python</option>
                                <option value="Java">Java</option>
                                <option value="Go">Go</option>
                                <option value="其他">其他</option>
                            </select>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CloseProjectModal"
                        disabled="@isCreatingProject">
                            取消
                        </button>
                        <button class="btn btn-primary" @onclick="CreateProject" disabled="@isCreatingProject">
                            @if (isCreatingProject)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            创建项目
                        </button>
                    </div>
                </div>
            </div>
        }

    </div>

</div>

@code {
    // 状态变量
    private List<ChatSession> sessions = new();
    private bool sessionsLoading = true;
    private string? activeSessionId;
    private ChatSession activeSession => sessions.FirstOrDefault(s => s.SessionId == activeSessionId);
    private string searchTerm = "";
    private string newMessage = "";
    private List<IBrowserFile> attachedFiles = new();
    private bool isSending = false;
    private ElementReference chatInputRef;
    private List<KnowledgeSet> knowledgeSets = new();
    private string selectedKnowledgeSetId = "";
    private bool showKnowledgeBase = false;
    private bool showModelConfig = false;
    private bool showProjectModal = false;
    private string projectName = "";
    private string projectDescription = "";
    private string techStack = "C#/.NET";
    private bool isCreatingProject = false;
    private void OpenProjectModal()
    {
        showProjectModal = true;
        projectName = "";
        projectDescription = "";
        techStack = "C#/.NET";
        StateHasChanged();
    }
    private void CloseProjectModal()
    {
        showProjectModal = false;
    }

    private async Task CreateProject()
    {
        // 验证输入
        if (string.IsNullOrWhiteSpace(projectName))
        {
            await JSRuntime.InvokeVoidAsync("showToast", "项目名称不能为空");
            return;
        }

        if (string.IsNullOrWhiteSpace(projectDescription))
        {
            await JSRuntime.InvokeVoidAsync("showToast", "项目描述不能为空");
            return;
        }

        isCreatingProject = true;
        StateHasChanged();
        try
        {
            // 调用Agent服务创建项目
            var zipBase64 = await AgentService.GenerateProject(
                activeSessionId,
                projectDescription,
                projectName,
                techStack);

            // 创建下载链接
            var fileName = $"{projectName.Trim()}.zip";
            await JSRuntime.InvokeVoidAsync("downloadBase64File", fileName, zipBase64);

            // 添加到聊天记录
            activeSession.Messages.Add(new ChatMessage
                {
                    Event = "ProjectCreated",
                    AssistantResponse = $"项目 **{projectName}** 已成功创建并下载。",
                    Timestamp = DateTime.UtcNow
                });

            // 关闭模态框
            CloseProjectModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", ex.Message);
        }
        finally
        {
            isCreatingProject = false;
            StateHasChanged();
            await ScrollToBottom(); // 滚动到最新消息
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
        await LoadKnowledgeSets();
    }

    private async Task CopyToClipboard(string content)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", content);
    }
    private async Task LoadSessions()
    {
        sessionsLoading = true;
        try
        {
            sessions = (await ChatService.GetChatSessionsAsync()).ToList();
            if (sessions.Any())
            {
                activeSessionId = sessions.First().SessionId;
                await SetActiveSession(activeSessionId);
            }
        }
        finally
        {
            sessionsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadKnowledgeSets()
    {
        knowledgeSets = await KnowledgeService.QueryAllSetsAsync();
    }

    // 获取会话预览
    private string GetSessionPreview(ChatSession session)
    {
        var lastMessage = session.Messages.LastOrDefault();
        if (lastMessage != null)
        {
            return !string.IsNullOrWhiteSpace(lastMessage.UserInput)
                ? lastMessage.UserInput
                : lastMessage.AssistantResponse ?? "新会话";
        }
        return "新会话";
    }

    // 过滤会话列表
    private IEnumerable<ChatSession> filteredSessions =>
        sessions.Where(s => s.SessionId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               GetSessionPreview(s).Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
               .OrderByDescending(s => s.LastUpdatedAt);

    // 创建新会话
    private async Task CreateNewSession()
    {
        var newSession = await ChatService.GetOrCreateSessionAsync();
        sessions.Add(newSession);
        activeSessionId = newSession.SessionId;
        StateHasChanged();
    }

    // 设置活动会话
    private async Task SetActiveSession(string sessionId)
    {
        activeSessionId = sessionId;
        // 确保会话已加载
        if (!sessions.Any(s => s.SessionId == sessionId))
        {
            var session = await ChatService.GetOrCreateSessionAsync(sessionId);
            sessions.Add(session);
        }
        var fullSession = await ChatService.GetFullSessionAsync(sessionId);
        if (fullSession != null)
        {
            sessions.RemoveAll(s => s.SessionId == sessionId);
            sessions.Add(fullSession);
        }
        StateHasChanged();
    }

    // 发送消息
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) && !attachedFiles.Any()) return;

        isSending = true;
        var currentMessage = newMessage;
        newMessage = ""; // 清空输入框

        // 添加用户消息到UI
        var userMessage = new ChatMessage
            {
                UserInput = currentMessage,
                Timestamp = DateTime.UtcNow,
                Files = attachedFiles.Select(f => UploadedFile.FromBrowserFile(f)).ToList()
            };
        activeSession.Messages.Add(userMessage);
        activeSession.LastUpdatedAt = DateTime.UtcNow;

        // 如果有上传的文件，先处理文件
        if (attachedFiles.Any())
        {
            await ChatService.AttachFileContentToSessionAsync(activeSessionId, attachedFiles.ToArray());
            attachedFiles.Clear();
        }

        // 创建AI消息占位符
        var aiMessage = new ChatMessage();
        activeSession.Messages.Add(aiMessage);
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // 流式接收AI响应
            var fullResponse = new StringBuilder();
            await foreach (var chunk in ChatService.SendMessageStreamingAsync(activeSessionId, currentMessage))
            {
                fullResponse.Append(chunk);
                aiMessage.AssistantResponse = fullResponse.ToString();
                aiMessage.Timestamp = DateTime.UtcNow;
                StateHasChanged();
                await ScrollToBottom();
            }
        }
        finally
        {
            isSending = false;
        }
    }

    // 处理文件上传
    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            attachedFiles.Add(file);
        }
        StateHasChanged();
    }

    // 移除文件
    private void RemoveFile(IBrowserFile file)
    {
        attachedFiles.Remove(file);
        StateHasChanged();
    }

    // 处理键盘事件 (Enter发送)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await JSRuntime.InvokeVoidAsync("preventDefaultEnter", chatInputRef.Id);
            await SendMessage();
        }
    }

    // 导出消息
    private async Task ExportMessage(string content)
    {
        await JSRuntime.InvokeVoidAsync("exportToMarkdown", content);
    }

    // 导出整个对话
    private async Task ExportConversation()
    {
        if (activeSession == null) return;

        var markdownContent = $"# {activeSession.SessionId}\n\n";
        foreach (var message in activeSession.Messages)
        {
            if (!string.IsNullOrWhiteSpace(message.UserInput))
            {
                markdownContent += $"## 用户 - {message.Timestamp.ToLocalTime():g}\n\n";
                markdownContent += $"{message.UserInput}\n\n";
            }

            if (!string.IsNullOrWhiteSpace(message.AssistantResponse))
            {
                markdownContent += $"## 助手 - {message.Timestamp.ToLocalTime():g}\n\n";
                markdownContent += $"{message.AssistantResponse}\n\n";
            }
        }

        await JSRuntime.InvokeVoidAsync("exportToMarkdown", markdownContent);
    }

    // 滚动到底部
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
    }

    // 加载知识集
    private async Task LoadKnowledgeSet()
    {
        if (string.IsNullOrEmpty(selectedKnowledgeSetId)) return;
        await AgentService.BuildPromptAsync(activeSessionId, selectedKnowledgeSetId);

        // 提示用户知识集已加载
        activeSession.Messages.Add(new ChatMessage
            {
                Event = "System",
                AssistantResponse = $"知识集已加载: {knowledgeSets.FirstOrDefault(k => k.Id.ToString() == selectedKnowledgeSetId)?.Name}",
                Timestamp = DateTime.UtcNow
            });
        StateHasChanged();
        await ScrollToBottom();
    }

    // 确认删除会话
    private async Task ConfirmDeleteSession()
    {
        if (activeSession != null)
        {
            await ChatService.ClearSessionAsync(activeSessionId);
            sessions.Remove(activeSession);
            activeSessionId = sessions.FirstOrDefault()?.SessionId;
            StateHasChanged();
        }
    }
}
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-content-wrapper {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        width: 90%;
        max-width: 1200px;
        height: 90vh;
        max-height: 90vh;
        overflow: auto;
        display: flex;
        flex-direction: column;
        position: relative;
        margin: auto;
    }

    .modal-header {
        border-bottom: 1px solid #dee2e6;
        position: sticky;
        top: 0;
        z-index: 10;
    }

</style>